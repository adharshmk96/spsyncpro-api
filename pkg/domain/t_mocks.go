// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountService is an autogenerated mock type for the AccountService type
type MockAccountService struct {
	mock.Mock
}

type MockAccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountService) EXPECT() *MockAccountService_Expecter {
	return &MockAccountService_Expecter{mock: &_m.Mock}
}

// ComparePassword provides a mock function for the type MockAccountService
func (_mock *MockAccountService) ComparePassword(ctx context.Context, password string, hash string) (bool, error) {
	ret := _mock.Called(ctx, password, hash)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, password, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, password, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_ComparePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePassword'
type MockAccountService_ComparePassword_Call struct {
	*mock.Call
}

// ComparePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password string
//   - hash string
func (_e *MockAccountService_Expecter) ComparePassword(ctx interface{}, password interface{}, hash interface{}) *MockAccountService_ComparePassword_Call {
	return &MockAccountService_ComparePassword_Call{Call: _e.mock.On("ComparePassword", ctx, password, hash)}
}

func (_c *MockAccountService_ComparePassword_Call) Run(run func(ctx context.Context, password string, hash string)) *MockAccountService_ComparePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountService_ComparePassword_Call) Return(b bool, err error) *MockAccountService_ComparePassword_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAccountService_ComparePassword_Call) RunAndReturn(run func(ctx context.Context, password string, hash string) (bool, error)) *MockAccountService_ComparePassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAuthToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) GenerateAuthToken(ctx context.Context, account *Account) (string, error) {
	ret := _mock.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAuthToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) (string, error)); ok {
		return returnFunc(ctx, account)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) string); ok {
		r0 = returnFunc(ctx, account)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Account) error); ok {
		r1 = returnFunc(ctx, account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_GenerateAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAuthToken'
type MockAccountService_GenerateAuthToken_Call struct {
	*mock.Call
}

// GenerateAuthToken is a helper method to define mock.On call
//   - ctx context.Context
//   - account *Account
func (_e *MockAccountService_Expecter) GenerateAuthToken(ctx interface{}, account interface{}) *MockAccountService_GenerateAuthToken_Call {
	return &MockAccountService_GenerateAuthToken_Call{Call: _e.mock.On("GenerateAuthToken", ctx, account)}
}

func (_c *MockAccountService_GenerateAuthToken_Call) Run(run func(ctx context.Context, account *Account)) *MockAccountService_GenerateAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_GenerateAuthToken_Call) Return(s string, err error) *MockAccountService_GenerateAuthToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAccountService_GenerateAuthToken_Call) RunAndReturn(run func(ctx context.Context, account *Account) (string, error)) *MockAccountService_GenerateAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePasswordResetToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) GeneratePasswordResetToken(ctx context.Context, account *Account) (string, error) {
	ret := _mock.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePasswordResetToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) (string, error)); ok {
		return returnFunc(ctx, account)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) string); ok {
		r0 = returnFunc(ctx, account)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Account) error); ok {
		r1 = returnFunc(ctx, account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_GeneratePasswordResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePasswordResetToken'
type MockAccountService_GeneratePasswordResetToken_Call struct {
	*mock.Call
}

// GeneratePasswordResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - account *Account
func (_e *MockAccountService_Expecter) GeneratePasswordResetToken(ctx interface{}, account interface{}) *MockAccountService_GeneratePasswordResetToken_Call {
	return &MockAccountService_GeneratePasswordResetToken_Call{Call: _e.mock.On("GeneratePasswordResetToken", ctx, account)}
}

func (_c *MockAccountService_GeneratePasswordResetToken_Call) Run(run func(ctx context.Context, account *Account)) *MockAccountService_GeneratePasswordResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_GeneratePasswordResetToken_Call) Return(s string, err error) *MockAccountService_GeneratePasswordResetToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAccountService_GeneratePasswordResetToken_Call) RunAndReturn(run func(ctx context.Context, account *Account) (string, error)) *MockAccountService_GeneratePasswordResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function for the type MockAccountService
func (_mock *MockAccountService) HashPassword(ctx context.Context, password string) (string, error) {
	ret := _mock.Called(ctx, password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockAccountService_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password string
func (_e *MockAccountService_Expecter) HashPassword(ctx interface{}, password interface{}) *MockAccountService_HashPassword_Call {
	return &MockAccountService_HashPassword_Call{Call: _e.mock.On("HashPassword", ctx, password)}
}

func (_c *MockAccountService_HashPassword_Call) Run(run func(ctx context.Context, password string)) *MockAccountService_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_HashPassword_Call) Return(s string, err error) *MockAccountService_HashPassword_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAccountService_HashPassword_Call) RunAndReturn(run func(ctx context.Context, password string) (string, error)) *MockAccountService_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SendPasswordResetEmail provides a mock function for the type MockAccountService
func (_mock *MockAccountService) SendPasswordResetEmail(ctx context.Context, email string, token string) error {
	ret := _mock.Called(ctx, email, token)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, email, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountService_SendPasswordResetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordResetEmail'
type MockAccountService_SendPasswordResetEmail_Call struct {
	*mock.Call
}

// SendPasswordResetEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - token string
func (_e *MockAccountService_Expecter) SendPasswordResetEmail(ctx interface{}, email interface{}, token interface{}) *MockAccountService_SendPasswordResetEmail_Call {
	return &MockAccountService_SendPasswordResetEmail_Call{Call: _e.mock.On("SendPasswordResetEmail", ctx, email, token)}
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) Run(run func(ctx context.Context, email string, token string)) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) Return(err error) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) RunAndReturn(run func(ctx context.Context, email string, token string) error) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAuthToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) ValidateAuthToken(ctx context.Context, token string) (uint, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAuthToken")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (uint, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_ValidateAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAuthToken'
type MockAccountService_ValidateAuthToken_Call struct {
	*mock.Call
}

// ValidateAuthToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAccountService_Expecter) ValidateAuthToken(ctx interface{}, token interface{}) *MockAccountService_ValidateAuthToken_Call {
	return &MockAccountService_ValidateAuthToken_Call{Call: _e.mock.On("ValidateAuthToken", ctx, token)}
}

func (_c *MockAccountService_ValidateAuthToken_Call) Run(run func(ctx context.Context, token string)) *MockAccountService_ValidateAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_ValidateAuthToken_Call) Return(v uint, err error) *MockAccountService_ValidateAuthToken_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAccountService_ValidateAuthToken_Call) RunAndReturn(run func(ctx context.Context, token string) (uint, error)) *MockAccountService_ValidateAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePasswordResetToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) ValidatePasswordResetToken(ctx context.Context, token string) (uint, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePasswordResetToken")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (uint, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_ValidatePasswordResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePasswordResetToken'
type MockAccountService_ValidatePasswordResetToken_Call struct {
	*mock.Call
}

// ValidatePasswordResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAccountService_Expecter) ValidatePasswordResetToken(ctx interface{}, token interface{}) *MockAccountService_ValidatePasswordResetToken_Call {
	return &MockAccountService_ValidatePasswordResetToken_Call{Call: _e.mock.On("ValidatePasswordResetToken", ctx, token)}
}

func (_c *MockAccountService_ValidatePasswordResetToken_Call) Run(run func(ctx context.Context, token string)) *MockAccountService_ValidatePasswordResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_ValidatePasswordResetToken_Call) Return(v uint, err error) *MockAccountService_ValidatePasswordResetToken_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAccountService_ValidatePasswordResetToken_Call) RunAndReturn(run func(ctx context.Context, token string) (uint, error)) *MockAccountService_ValidatePasswordResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) CreateAccount(ctx context.Context, account *Account) (*Account, error) {
	ret := _mock.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) (*Account, error)); ok {
		return returnFunc(ctx, account)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) *Account); ok {
		r0 = returnFunc(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Account) error); ok {
		r1 = returnFunc(ctx, account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account *Account
func (_e *MockAccountRepository_Expecter) CreateAccount(ctx interface{}, account interface{}) *MockAccountRepository_CreateAccount_Call {
	return &MockAccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, account)}
}

func (_c *MockAccountRepository_CreateAccount_Call) Run(run func(ctx context.Context, account *Account)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) Return(account1 *Account, err error) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) RunAndReturn(run func(ctx context.Context, account *Account) (*Account, error)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) DeleteAccount(ctx context.Context, id uint) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockAccountRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockAccountRepository_Expecter) DeleteAccount(ctx interface{}, id interface{}) *MockAccountRepository_DeleteAccount_Call {
	return &MockAccountRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *MockAccountRepository_DeleteAccount_Call) Run(run func(ctx context.Context, id uint)) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) Return(err error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) RunAndReturn(run func(ctx context.Context, id uint) error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByEmail provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetAccountByEmail(ctx context.Context, email string) (*Account, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByEmail")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Account, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Account); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetAccountByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByEmail'
type MockAccountRepository_GetAccountByEmail_Call struct {
	*mock.Call
}

// GetAccountByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockAccountRepository_Expecter) GetAccountByEmail(ctx interface{}, email interface{}) *MockAccountRepository_GetAccountByEmail_Call {
	return &MockAccountRepository_GetAccountByEmail_Call{Call: _e.mock.On("GetAccountByEmail", ctx, email)}
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) Run(run func(ctx context.Context, email string)) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) Return(account *Account, err error) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*Account, error)) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByID provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetAccountByID(ctx context.Context, id uint) (*Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (*Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) *Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByID'
type MockAccountRepository_GetAccountByID_Call struct {
	*mock.Call
}

// GetAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockAccountRepository_Expecter) GetAccountByID(ctx interface{}, id interface{}) *MockAccountRepository_GetAccountByID_Call {
	return &MockAccountRepository_GetAccountByID_Call{Call: _e.mock.On("GetAccountByID", ctx, id)}
}

func (_c *MockAccountRepository_GetAccountByID_Call) Run(run func(ctx context.Context, id uint)) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetAccountByID_Call) Return(account *Account, err error) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetAccountByID_Call) RunAndReturn(run func(ctx context.Context, id uint) (*Account, error)) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// LogAccountActivity provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) LogAccountActivity(ctx context.Context, accountID uint, activity string) error {
	ret := _mock.Called(ctx, accountID, activity)

	if len(ret) == 0 {
		panic("no return value specified for LogAccountActivity")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = returnFunc(ctx, accountID, activity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_LogAccountActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogAccountActivity'
type MockAccountRepository_LogAccountActivity_Call struct {
	*mock.Call
}

// LogAccountActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uint
//   - activity string
func (_e *MockAccountRepository_Expecter) LogAccountActivity(ctx interface{}, accountID interface{}, activity interface{}) *MockAccountRepository_LogAccountActivity_Call {
	return &MockAccountRepository_LogAccountActivity_Call{Call: _e.mock.On("LogAccountActivity", ctx, accountID, activity)}
}

func (_c *MockAccountRepository_LogAccountActivity_Call) Run(run func(ctx context.Context, accountID uint, activity string)) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountRepository_LogAccountActivity_Call) Return(err error) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_LogAccountActivity_Call) RunAndReturn(run func(ctx context.Context, accountID uint, activity string) error) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) UpdateAccount(ctx context.Context, account *Account) (*Account, error) {
	ret := _mock.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) (*Account, error)); ok {
		return returnFunc(ctx, account)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) *Account); ok {
		r0 = returnFunc(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Account) error); ok {
		r1 = returnFunc(ctx, account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockAccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account *Account
func (_e *MockAccountRepository_Expecter) UpdateAccount(ctx interface{}, account interface{}) *MockAccountRepository_UpdateAccount_Call {
	return &MockAccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, account)}
}

func (_c *MockAccountRepository_UpdateAccount_Call) Run(run func(ctx context.Context, account *Account)) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) Return(account1 *Account, err error) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) RunAndReturn(run func(ctx context.Context, account *Account) (*Account, error)) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}
